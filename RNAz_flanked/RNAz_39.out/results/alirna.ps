%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.3
%%CreationDate: Sat Apr 24 06:21:28 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
CUA_AACCAAUACAGUCUUUAG_AA_AUUUGC_UAGAUACUGUUCGCACAAAUGUUUAUGUUGCUGUCAAUGAUAAAAAUCUCUAUAACAAACUUGCUACAAGAUUAU_UCCAAAUGGAGAGA\
) def
/coor [
[47.61605835 476.43130493]
[36.09937668 486.19189453]
[22.37591743 492.48229980]
[7.46404839 494.83575439]
[-7.52966833 493.07760620]
[-21.49259949 487.33834839]
[-33.38860321 478.04385376]
[-42.33491898 465.88385010]
[-47.66766739 451.76065063]
[-48.99112701 436.72232056]
[-46.20708466 421.88482666]
[-39.52213287 408.34915161]
[-29.43234634 397.11978149]
[-16.68645096 389.02999878]
[-2.23027515 384.68011475]
[12.86343479 384.39291382]
[16.62322235 369.87173462]
[20.38301086 355.35058594]
[24.14279938 340.82943726]
[27.90258789 326.30828857]
[31.66237450 311.78710938]
[35.42216110 297.26596069]
[22.85385704 290.88125610]
[11.90502644 281.99139404]
[3.06738758 270.99221802]
[-3.26143289 258.37432861]
[-6.79578733 244.70124817]
[-7.37490034 230.58427429]
[-4.97017956 216.65510559]
[0.31338486 203.53764343]
[8.24180126 191.81996155]
[18.46243858 182.02799988]
[30.51970863 174.60194397]
[43.87537384 169.87644958]
[57.93257523 168.06552124]
[72.06250000 169.25286865]
[76.55294800 154.94078064]
[81.04339600 140.62869263]
[85.53384399 126.31659698]
[90.02429199 112.00450897]
[86.08085632 97.53214264]
[74.95065308 87.47637177]
[63.82044983 77.42060089]
[47.68078613 74.51487732]
[42.38272858 58.99512863]
[53.37646866 46.82673645]
[69.35258484 50.52750397]
[73.87622070 66.29039764]
[85.00642395 76.34616852]
[96.13662720 86.40193939]
[103.23349762 83.97615814]
[98.28681946 69.81528473]
[93.34014130 55.65440750]
[88.67944336 41.39685440]
[102.87317657 36.54527283]
[107.91475677 50.67265320]
[112.67099762 64.89862061]
[117.42723846 79.12458801]
[124.52410889 76.69879913]
[127.17041016 61.93407822]
[129.81671143 47.16934967]
[132.46299744 32.40462494]
[135.10929871 17.63990021]
[129.03791809 2.40604329]
[139.40618896 -10.29951096]
[155.54811096 -7.40637684]
[160.85827637 8.10923672]
[149.87402344 20.28619766]
[147.22772217 35.05092239]
[144.58143616 49.81564713]
[141.93513489 64.58037567]
[139.28883362 79.34510040]
[153.60430908 74.86543274]
[168.56251526 73.74649048]
[183.38513184 76.04647827]
[197.30088806 81.64572906]
[209.58570862 90.25289917]
[219.60035706 101.42012024]
[226.82374573 114.56632233]
[230.88000488 129.00746155]
[231.55809021 143.99212646]
[228.82270813 158.74061584]
[222.81619263 172.48550415]
[213.85108948 184.51158142]
[202.39387512 194.19313049]
[189.04071045 201.02635193]
[174.48640442 204.65570068]
[159.48826599 204.89233398]
[144.82670593 201.72393799]
[131.26461792 195.31536865]
[119.50768280 186.00009155]
[110.16764832 174.26281738]
[103.73051453 160.71426392]
[100.53121948 146.05941772]
[100.73624420 131.06082153]
[104.33638000 116.49495697]
[99.84593201 130.80705261]
[95.35548401 145.11914062]
[90.86503601 159.43122864]
[86.37458801 173.74331665]
[100.09026337 181.92260742]
[111.47566986 193.10859680]
[119.88722229 206.66340637]
[124.85073853 221.81544495]
[126.08820343 237.70326233]
[123.53329468 253.42460632]
[117.33496857 268.08755493]
[107.84873962 280.86126709]
[95.61634064 291.02288818]
[81.33473969 297.99856567]
[65.81645203 301.39587402]
[49.94332123 301.02575684]
[46.18353271 315.54690552]
[42.42374420 330.06805420]
[38.66395569 344.58923340]
[34.90416718 359.11038208]
[31.14438057 373.63153076]
[27.38459206 388.15267944]
[40.44234467 395.72882080]
[50.97104263 406.54772949]
[58.18938065 419.80664062]
[61.56171799 434.52157593]
[60.83779907 449.60067749]
] def
/pairs [
[16 118]
[17 117]
[18 116]
[19 115]
[20 114]
[21 113]
[22 112]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[41 50]
[42 49]
[43 48]
[59 72]
[60 71]
[61 70]
[62 69]
[63 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
16 118 1 gmark
118 cmark
17 117 2 gmark
18 116 3 gmark
18 cmark
116 cmark
19 115 1 gmark
20 114 2 gmark
114 cmark
21 113 3 gmark
113 cmark
22 112 2 gmark
22 cmark
112 cmark
36 100 2 gmark
36 cmark
100 cmark
37 99 3 gmark
37 cmark
99 cmark
38 98 3 gmark
38 cmark
98 cmark
39 97 1 gmark
39 cmark
97 cmark
40 96 2 gmark
40 cmark
41 50 2 gmark
41 cmark
50 cmark
43 48 1 gmark
59 72 1 gmark
59 cmark
72 cmark
60 71 2 gmark
60 cmark
71 cmark
61 70 2 gmark
62 69 1 gmark
62 cmark
69 cmark
68 cmark

% End Annotations
% show it
showpage
end
%%EOF
