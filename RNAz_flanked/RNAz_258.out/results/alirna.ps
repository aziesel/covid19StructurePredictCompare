%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.3
%%CreationDate: Sat Apr 24 06:00:07 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAUGAGCCUGAAGAACAUGUCCAAAUUCACACAAUCGACGGUUCAUCCGGAGUUGUUAAUCCAGCAAUGGAACCAAUUUAUGAUGAACCGACGACGACUACUAGCGUGCCUUUGUAAGCACAAGCUGAUGAGUACGAACUUAUGUACUC\
) def
/coor [
[90.41092682 169.69416809]
[89.50881195 184.66702271]
[88.60670471 199.63986206]
[87.70458984 214.61271667]
[90.74151611 229.30206299]
[86.12123108 243.57276917]
[75.05133820 253.69490051]
[60.42517090 257.02285767]
[46.06555557 252.68678284]
[35.72565460 241.82002258]
[32.10799789 227.26280212]
[36.15813446 212.81994629]
[46.81539917 202.26753235]
[54.34986115 189.29711914]
[61.88431931 176.32669067]
[69.41877747 163.35626221]
[76.95323944 150.38584900]
[69.77334595 148.21810913]
[56.94288254 155.98851013]
[44.11241913 163.75891113]
[42.94822311 179.23225403]
[32.88571930 191.04435730]
[17.79413986 194.65321350]
[3.47650695 188.67115784]
[-4.56175709 175.39840698]
[-3.22977614 159.93859863]
[6.96027613 148.23635864]
[22.09011650 144.79142761]
[36.34201431 150.92845154]
[49.17247772 143.15805054]
[62.00294113 135.38763428]
[52.41458511 115.85607910]
[51.88291550 94.85263062]
[59.88428497 76.23702240]
[74.38233185 63.17443848]
[67.99564362 49.60203171]
[61.60895157 36.02962494]
[48.73220444 26.83724022]
[50.31411362 12.02687740]
[43.92742538 -1.54552817]
[37.54073715 -15.11793423]
[31.15404510 -28.69034004]
[24.76735687 -42.26274490]
[18.38066673 -55.83515167]
[11.99397755 -69.40755463]
[5.60728836 -82.97996521]
[-0.77940094 -96.55236816]
[-15.37734127 -101.98724365]
[-21.66100883 -115.84257507]
[-16.38972092 -129.72598267]
[-22.77641106 -143.29840088]
[-29.16309929 -156.87080383]
[-35.54978943 -170.44320679]
[-41.93647766 -184.01560974]
[-48.32316971 -197.58801270]
[-60.15546417 -199.38044739]
[-69.53838348 -206.61317444]
[-74.18827057 -217.37858582]
[-73.04519653 -228.92857361]
[-66.51213074 -238.37579346]
[-72.32486725 -252.20375061]
[-78.13759613 -266.03170776]
[-83.95033264 -279.85964966]
[-97.33277130 -289.33816528]
[-95.54613495 -305.63970947]
[-80.42836761 -311.99462891]
[-67.53132629 -301.86553955]
[-70.12238312 -285.67236328]
[-64.30965424 -271.84442139]
[-58.49691772 -258.01647949]
[-52.68418503 -244.18853760]
[-35.38064957 -238.36233521]
[-27.63722801 -221.47761536]
[-34.75076294 -203.97470093]
[-28.36407280 -190.40229797]
[-21.97738457 -176.82989502]
[-15.59069443 -163.25749207]
[-9.20400524 -149.68508911]
[-2.81731558 -136.11267090]
[11.24008179 -131.32466125]
[17.91043663 -117.65128326]
[12.79300499 -102.93905640]
[19.17969513 -89.36665344]
[25.56638336 -75.79424286]
[31.95307350 -62.22183990]
[38.33976364 -48.64943314]
[44.72645187 -35.07703018]
[51.11314011 -21.50462341]
[57.49983215 -7.93221760]
[63.88652039 5.64018822]
[76.30644989 13.86178589]
[75.18135834 29.64293671]
[81.56804657 43.21534348]
[87.95473480 56.78775024]
[97.66651917 55.20109558]
[107.49059296 55.77016830]
[116.95421600 58.46758270]
[125.60200500 63.16354370]
[133.01782227 69.63208008]
[138.84481812 77.56192017]
[142.80259705 86.57147980]
[144.70071411 96.22722626]
[159.64810181 97.48239136]
[174.59548950 98.73756409]
[189.54289246 99.99272919]
[204.51329041 100.93458557]
[219.50012207 101.56272125]
[234.48696899 102.19085693]
[249.47381592 102.81899261]
[259.00631714 90.57517242]
[273.92428589 86.30513000]
[288.49151611 91.65078735]
[297.10653687 104.55663300]
[296.45675659 120.06009674]
[286.79199219 132.19978333]
[271.82858276 136.30773926]
[257.32022095 130.80436707]
[248.84567261 117.80583191]
[233.85884094 117.17769623]
[218.87199402 116.54956818]
[203.88514709 115.92143250]
[199.78327942 118.48338318]
[194.01679993 118.44985962]
[188.28771973 114.94012451]
[173.34033203 113.68495178]
[158.39292908 112.42978668]
[143.44554138 111.17462158]
[138.61062622 127.17369080]
[127.82575226 141.02204895]
[112.06533813 150.50236511]
[118.45202637 164.07476807]
[124.83871460 177.64718628]
[131.22540283 191.21958923]
[137.61209106 204.79199219]
[143.99877930 218.36439514]
[159.26567078 221.13961792]
[169.96124268 232.38169861]
[171.97282410 247.76783752]
[164.52693176 261.38174438]
[150.48666382 267.98858643]
[135.25079346 265.04791260]
[124.67780304 253.69047546]
[122.83324432 238.28341675]
[130.42637634 224.75108337]
[124.03968811 211.17868042]
[117.65299988 197.60627747]
[111.26631165 184.03387451]
[104.87962341 170.46147156]
[98.49292755 156.88905334]
] def
/pairs [
[18 31]
[19 30]
[20 29]
[35 94]
[36 93]
[37 92]
[39 90]
[40 89]
[41 88]
[42 87]
[43 86]
[44 85]
[45 84]
[46 83]
[47 82]
[50 79]
[51 78]
[52 77]
[53 76]
[54 75]
[55 74]
[60 71]
[61 70]
[62 69]
[63 68]
[102 127]
[103 126]
[104 125]
[105 124]
[106 121]
[107 120]
[108 119]
[109 118]
[130 149]
[131 148]
[132 147]
[133 146]
[134 145]
[135 144]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
42 cmark
87 cmark
45 84 1 gmark
127 cmark
103 126 1 gmark
104 125 1 gmark

% End Annotations
% show it
showpage
end
%%EOF
