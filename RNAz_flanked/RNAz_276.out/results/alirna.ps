%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.3
%%CreationDate: Sat Apr 24 06:06:59 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
UCAUAAUGAAACUUGUCACGCCUAAACGAACAUGAAACUUCUUGUUUUCUUAGGAAUCAUCACAACAGUAACUGCAUUUCACCAAGAAUGUAGUUUACAGUCAUGUACUCAACACCAACCAUAUGUAGUUGAUGACCCGUGUCCUAU\
) def
/coor [
[90.84241486 284.24435425]
[80.70045471 295.45291138]
[67.70442963 303.17266846]
[53.00995636 306.71722412]
[37.92364502 305.77136230]
[23.78696632 300.41918945]
[11.85694313 291.13662720]
[3.19438314 278.74905396]
[-1.43044353 264.35800171]
[-1.60630023 249.24310303]
[2.68244982 234.74835205]
[11.05445385 222.16259766]
[22.76527977 212.60499573]
[36.77360535 206.92536926]
[51.83382797 205.62875366]
[46.95156097 191.55705261]
[57.42260742 179.69671631]
[60.58279800 165.03338623]
[63.74298859 150.37005615]
[66.90317535 135.70672607]
[57.60427094 123.93683624]
[42.60765076 123.61845398]
[27.61102867 123.30007172]
[12.61440754 122.98168945]
[-2.38221312 122.66330719]
[-13.74407101 133.31910706]
[-28.94824219 132.78259277]
[-39.03689194 121.88512421]
[-54.03351212 121.56674194]
[-69.03013611 121.24836731]
[-84.02675629 120.92998505]
[-99.02337646 120.61160278]
[-112.98466492 128.05424500]
[-125.54484558 120.04854584]
[-140.54145813 119.73016357]
[-154.64602661 128.09637451]
[-168.80918884 119.82977295]
[-168.46110535 103.43431854]
[-153.95985413 95.77626038]
[-140.22308350 104.73354340]
[-125.22646332 105.05192566]
[-112.33782959 97.58650970]
[-98.70499420 105.61498260]
[-83.70837402 105.93336487]
[-68.71175385 106.25174713]
[-53.71513367 106.57012177]
[-38.71851349 106.88850403]
[-28.17644882 96.42903900]
[-12.96320820 96.53828430]
[-2.06383228 107.66668701]
[12.93278790 107.98506927]
[27.92940903 108.30345154]
[42.92602921 108.62183380]
[57.92264938 108.94021606]
[57.74786377 96.71321869]
[61.00134277 85.11454010]
[67.31634521 75.07033539]
[76.08621216 67.35204315]
[86.52136230 62.51741409]
[97.71979523 60.87086105]
[108.74481201 62.44604874]
[114.92332458 48.77762222]
[121.10184479 35.10919571]
[127.28036499 21.44076729]
[133.16737366 7.64427757]
[138.76022339 -6.27405787]
[144.35307312 -20.19239426]
[149.94592285 -34.11072922]
[155.53875732 -48.02906418]
[161.13160706 -61.94739914]
[166.72445679 -75.86573792]
[172.16926575 -89.84264374]
[177.46543884 -103.87655640]
[182.76159668 -117.91046906]
[188.05776978 -131.94438171]
[193.35392761 -145.97828674]
[198.65010071 -160.01219177]
[203.94625854 -174.04611206]
[209.24243164 -188.08001709]
[202.50505066 -202.37628174]
[207.92855835 -217.22085571]
[222.29525757 -223.80670166]
[237.08164978 -218.22656250]
[243.51524353 -203.79103088]
[237.77908325 -189.06445312]
[223.27633667 -182.78384399]
[217.98017883 -168.74993896]
[212.68400574 -154.71603394]
[207.38784790 -140.68211365]
[202.09167480 -126.64820862]
[196.79551697 -112.61430359]
[191.49934387 -98.58039093]
[186.20318604 -84.54647827]
[186.78820801 -77.12655640]
[180.64279175 -70.27288818]
[175.04994202 -56.35455322]
[169.45709229 -42.43621826]
[163.86425781 -28.51788139]
[158.27140808 -14.59954643]
[152.67855835 -0.68121076]
[147.08570862 13.23712444]
[148.13354492 17.96136093]
[146.17533875 23.38945389]
[140.94879150 27.61928558]
[134.77027893 41.28771210]
[128.59175110 54.95613861]
[122.41323853 68.62456512]
[128.57130432 74.10692596]
[133.42303467 80.77316284]
[136.74661255 88.31848145]
[138.39004517 96.39791107]
[138.27822876 104.64202881]
[136.41624451 112.67390442]
[149.35324097 120.26563263]
[162.29022217 127.85736084]
[175.22721863 135.44908142]
[188.16419983 143.04081726]
[201.10119629 150.63253784]
[214.03817749 158.22427368]
[228.20359802 151.89019775]
[243.37976074 155.12496948]
[253.73110962 166.68476868]
[255.27735901 182.12461853]
[247.42393494 195.50756836]
[233.19064331 201.68760681]
[218.05046082 198.28837585]
[207.82511902 186.61697388]
[206.44645691 171.16125488]
[193.50946045 163.56953430]
[180.57247925 155.97779846]
[167.63548279 148.38607788]
[154.69850159 140.79435730]
[141.76150513 133.20262146]
[128.82452393 125.61089325]
[119.80088806 134.37854004]
[108.13345337 139.96847534]
[94.94014740 141.59552002]
[81.56650543 138.86691284]
[78.40631866 153.53024292]
[75.24612427 168.19357300]
[72.08593750 182.85690308]
[76.74216461 197.97741699]
[66.49715424 208.78894043]
[79.68637848 216.17376709]
[90.11172485 227.11926270]
[96.84616852 240.65213013]
[99.29089355 255.56906128]
] def
/pairs [
[15 143]
[17 141]
[18 140]
[19 139]
[20 138]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[28 47]
[29 46]
[30 45]
[31 44]
[32 43]
[34 41]
[35 40]
[61 107]
[62 106]
[63 105]
[64 104]
[65 101]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[71 95]
[72 93]
[73 92]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[113 134]
[114 133]
[115 132]
[116 131]
[117 130]
[118 129]
[119 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
61 107 1 gmark
67 99 1 gmark
71 cmark
115 132 1 gmark

% End Annotations
% show it
showpage
end
%%EOF
