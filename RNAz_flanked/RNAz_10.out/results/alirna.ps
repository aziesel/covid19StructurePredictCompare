%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.3
%%CreationDate: Sat Apr 24 03:54:13 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
UGCUUGGUACACGGAACGUUCUGAAAAGAGCUAUGAAUUGCAGACACCUUUUGAAAUUAAAUUGGCAAAGAAAUUUGACACAUUCAAUGGGGAAUGUCCAAAUUUUGUAUUUCCCCUAAAUUCCAAAAUCAAGACUAUUCAACCAAGGGUUGAAAAGAAA\
) def
/coor [
[184.41163635 303.29675293]
[185.66549683 295.82586670]
[189.49165344 289.20864868]
[182.46105957 275.95834351]
[175.43048096 262.70800781]
[168.39990234 249.45770264]
[161.36930847 236.20738220]
[154.33872986 222.95707703]
[140.97550964 222.31512451]
[129.59008789 215.08517456]
[123.22464752 203.07196045]
[123.64267731 189.37446594]
[130.84184265 177.58671570]
[124.07112885 164.20175171]
[117.30041504 150.81677246]
[110.52970886 137.43180847]
[90.60931396 137.73367310]
[73.15403748 128.13021851]
[60.89948654 136.78042603]
[48.64493942 145.43061829]
[36.39039230 154.08082581]
[24.13584328 162.73103333]
[17.75670242 177.83860779]
[1.45232677 179.59910583]
[-8.00473881 166.20150757]
[-0.88587672 151.42808533]
[15.48563766 150.47648621]
[27.74018669 141.82627869]
[39.99473572 133.17607117]
[52.24928284 124.52587128]
[64.50382996 115.87566376]
[61.26635361 103.42338562]
[62.26957321 90.59629822]
[67.40364838 78.79875946]
[56.64296341 68.34851074]
[45.88227844 57.89826584]
[35.12159348 47.44801712]
[17.18529892 43.38471985]
[13.00742626 26.36246872]
[2.04488659 16.12417221]
[-9.01701927 5.99331665]
[-20.17723846 -4.02913332]
[-31.33745956 -14.05158234]
[-42.49767685 -24.07403183]
[-55.75337601 -20.19261932]
[-69.08719635 -23.35568619]
[-79.02851105 -32.62965775]
[-83.04441833 -45.50493240]
[-80.18457794 -58.57432175]
[-91.14711761 -68.81261444]
[-102.10965729 -79.05091858]
[-113.07219696 -89.28921509]
[-124.03473663 -99.52751160]
[-139.60733032 -99.16432953]
[-150.57905579 -109.70358276]
[-150.82933044 -124.55191040]
[-166.61386108 -123.76191711]
[-178.27760315 -134.42646790]
[-178.90068054 -150.21847534]
[-168.11340332 -161.76881409]
[-152.31570435 -162.22488403]
[-140.88005066 -151.31610107]
[-140.59103394 -135.51445007]
[-125.76023865 -136.27804565]
[-114.49681091 -126.05113220]
[-113.79644012 -110.49005127]
[-102.83390045 -100.25175476]
[-91.87136078 -90.01345825]
[-80.90882111 -79.77515411]
[-69.94628143 -69.53685760]
[-53.96292877 -73.17699432]
[-38.80018616 -66.52304840]
[-30.49289131 -52.00776672]
[-32.47522736 -35.23425293]
[-21.31501007 -25.21180153]
[-10.15478992 -15.18935299]
[1.00543010 -5.16690302]
[8.11921406 -3.02659392]
[12.28318405 5.16163254]
[23.24572372 15.39993000]
[35.37357330 15.30909348]
[44.59381104 23.79319191]
[45.57183838 36.68733215]
[56.33252335 47.13758087]
[67.09320831 57.58782578]
[77.85389709 68.03807068]
[92.94416809 61.76088333]
[109.28095245 62.23918915]
[123.97811890 69.38848877]
[135.33177185 59.58570480]
[146.68542480 49.78291702]
[158.03907776 39.98013306]
[169.39273071 30.17734528]
[180.74636841 20.37455940]
[185.22663879 12.35503006]
[192.41851807 10.49390221]
[203.96127319 0.91451228]
[209.63951111 -13.85262299]
[224.37460327 -16.02660370]
[235.91735840 -25.60599327]
[247.46012878 -35.18538284]
[255.78726196 -49.95343018]
[272.28335571 -46.03992081]
[273.08935547 -29.10514450]
[257.03952026 -23.64262581]
[245.49674988 -14.06323528]
[233.95399475 -4.48384476]
[229.10137939 9.59810829]
[213.54066467 12.45727158]
[201.99790955 22.03666115]
[190.54916382 31.72821045]
[179.19551086 41.53099823]
[167.84185791 51.33378220]
[156.48820496 61.13656998]
[145.13455200 70.93935394]
[133.78089905 80.74214172]
[137.83546448 91.02822113]
[138.83110046 102.03964996]
[136.68734741 112.88617706]
[131.57749939 122.69088745]
[123.91468048 130.66110229]
[130.68539429 144.04606628]
[137.45610046 157.43104553]
[144.22680664 170.81600952]
[160.93788147 173.26969910]
[172.78930664 185.07005310]
[175.26550293 201.44235229]
[167.58903503 215.92648315]
[174.61962891 229.17680359]
[181.65020752 242.42712402]
[188.68080139 255.67742920]
[195.71138000 268.92776489]
[202.74195862 282.17807007]
[223.42340088 292.65393066]
[222.22579956 315.07104492]
[230.51365662 327.57348633]
[244.58761597 334.80084229]
[245.17073059 349.68402100]
[253.45858765 362.18649292]
[261.74645996 374.68893433]
[270.03433228 387.19137573]
[278.32220459 399.69384766]
[286.61004639 412.19628906]
[294.89791870 424.69873047]
[308.68902588 434.55984497]
[303.03106689 450.54183960]
[286.10739136 449.52920532]
[282.39547729 432.98660278]
[274.10760498 420.48416138]
[265.81973267 407.98168945]
[257.53186035 395.47924805]
[249.24400330 382.97680664]
[240.95614624 370.47436523]
[232.66827393 357.97189331]
[219.18713379 351.63882446]
[218.01121521 335.86135864]
[209.72334290 323.35891724]
[202.50000000 323.74053955]
[195.53562927 321.54644775]
[189.72760010 317.00918579]
] def
/pairs [
[3 133]
[4 132]
[5 131]
[6 130]
[7 129]
[8 128]
[13 124]
[14 123]
[15 122]
[16 121]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[34 86]
[35 85]
[36 84]
[37 83]
[39 80]
[40 79]
[41 77]
[42 76]
[43 75]
[44 74]
[49 70]
[50 69]
[51 68]
[52 67]
[53 66]
[56 63]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
[96 110]
[97 109]
[99 107]
[100 106]
[101 105]
[135 157]
[136 156]
[138 154]
[139 153]
[140 152]
[141 151]
[142 150]
[143 149]
[144 148]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
3 133 1 gmark
4 132 1 gmark
128 cmark
13 cmark
124 cmark
16 cmark
121 cmark
19 cmark
34 86 1 gmark
85 cmark
37 cmark
39 80 1 gmark
40 79 1 gmark
49 cmark
52 67 1 gmark
56 63 1 gmark
116 cmark
115 cmark
93 112 1 gmark
97 cmark
109 cmark
135 cmark
136 156 1 gmark
144 148 1 gmark

% End Annotations
% show it
showpage
end
%%EOF
