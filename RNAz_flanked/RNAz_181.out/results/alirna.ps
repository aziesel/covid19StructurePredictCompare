%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.3
%%CreationDate: Sat Apr 24 05:12:52 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
UAUGACUGAUAAAGCUCUCUUUGAUUCACUCGAGU______UUGCUGAAAUUUCUCUUACUAAUU__ACAA_UUUACAGUCUCAGAUUGUAACUGGCUUGUUUAAAGAUUGUUCUAGAGAAACUACUGGUCU\
) def
/coor [
[61.90361023 140.82913208]
[59.37576294 126.04367065]
[66.42745209 112.80457306]
[80.10892487 106.65207672]
[65.41024780 109.64355469]
[50.71157455 112.63504028]
[44.20485687 126.59816742]
[30.87960815 133.96641541]
[15.94738579 132.09753418]
[5.10865593 121.91617584]
[-9.59001827 124.90766144]
[-24.28869247 127.89913940]
[-38.98736572 130.89062500]
[-53.68604279 133.88211060]
[-58.88329315 152.26367188]
[-72.55494690 165.48916626]
[-90.94265747 170.03532410]
[-109.04779053 164.74949646]
[-121.99026489 151.14062500]
[-136.34115601 155.50549316]
[-150.69203186 159.87034607]
[-165.04292297 164.23521423]
[-179.39381409 168.60008240]
[-193.74468994 172.96495056]
[-202.53509521 186.38539124]
[-218.52111816 187.73678589]
[-229.43968201 175.98243713]
[-226.91497803 160.13929749]
[-212.88375854 152.36083984]
[-198.10955811 158.61405945]
[-183.75866699 154.24919128]
[-169.40779114 149.88432312]
[-155.05690002 145.51947021]
[-140.70600891 141.15460205]
[-126.35512543 136.78973389]
[-125.63848114 125.55667877]
[-121.48316193 115.06704712]
[-114.27876282 106.34918976]
[-104.71463776 100.26322174]
[-93.71399689 97.41620636]
[-82.34475708 98.10158539]
[-71.71588898 102.26906586]
[-62.86927414 109.52789307]
[-56.67752457 119.18343353]
[-41.97885132 116.19194794]
[-27.28017616 113.20046997]
[-12.58150196 110.20898438]
[2.11717248 107.21749878]
[8.11431885 93.60970306]
[21.12827682 86.05319214]
[36.27344513 87.62712097]
[47.72009277 97.93636322]
[62.41876602 94.94488525]
[77.11743927 91.95339966]
[62.34847641 89.33085632]
[48.78182220 82.93196106]
[37.36450577 73.20339966]
[28.89352798 60.82427979]
[23.96021461 46.65874481]
[22.90893745 31.69562912]
[25.81308174 16.97945023]
[32.46992493 3.53748441]
[42.41477585 -7.69193840]
[54.95342636 -15.92493629]
[69.21060181 -20.58679771]
[84.19106293 -21.35209656]
[98.84909058 -18.16740990]
[112.16146851 -11.25504875]
[123.19889832 -1.09753585]
[131.19091797 11.59607220]
[135.57962036 25.93968582]
[136.05867004 40.93203354]
[132.59460449 55.52656174]
[125.42923737 68.70448303]
[115.06441498 79.54458618]
[129.51438904 75.51988983]
[143.96437073 71.49519348]
[158.41433716 67.47049713]
[172.86431885 63.44580078]
[187.31430054 59.42110443]
[201.76426697 55.39640808]
[216.21424866 51.37171173]
[215.89843750 36.29354477]
[219.34313965 21.61073685]
[226.33180237 8.24625969]
[236.42514038 -2.95978618]
[248.98864746 -11.30297756]
[263.23260498 -16.25885391]
[278.26159668 -17.51588631]
[293.13088989 -14.99505615]
[306.90582275 -8.85482407]
[318.72045898 0.51882958]
[327.83212280 12.53666878]
[333.66802979 26.44324112]
[335.86138916 41.36436844]
[334.27426147 56.36209869]
[329.00643921 70.49365997]
[320.38906860 82.87072754]
[308.96386719 92.71527100]
[295.44897461 99.40845490]
[280.69400024 102.52954102]
[265.62640381 101.88233185]
[251.19338989 97.50751495]
[238.30223083 89.68009186]
[227.76324463 78.89210510]
[220.23893738 65.82168579]
[205.78897095 69.84638214]
[191.33898926 73.87107849]
[176.88902283 77.89577484]
[162.43904114 81.92047119]
[147.98905945 85.94516754]
[133.53909302 89.96986389]
[119.08911133 93.99456024]
[113.55406952 107.93598938]
[121.30830383 120.77622986]
[129.06253052 133.61647034]
[136.81677246 146.45671082]
[144.57101440 159.29695129]
[152.32524109 172.13720703]
[166.93940735 179.57751465]
[167.53266907 195.96592712]
[153.49473572 204.44345093]
[139.26663208 196.28912354]
[139.48500061 179.89143372]
[131.73075867 167.05119324]
[123.97653198 154.21095276]
[116.22229767 141.37071228]
[108.46805573 128.53045654]
[100.71382141 115.69022369]
[105.45349884 129.92172241]
[100.48993683 144.07667542]
[87.90029144 152.23149109]
] def
/pairs [
[4 54]
[5 53]
[6 52]
[10 48]
[11 47]
[12 46]
[13 45]
[14 44]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[24 30]
[75 113]
[76 112]
[77 111]
[78 110]
[79 109]
[80 108]
[81 107]
[82 106]
[114 129]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 54 1 gmark
5 53 1 gmark
5 cmark
53 cmark
6 52 3 gmark
6 cmark
52 cmark
10 48 1 gmark
11 47 3 gmark
12 cmark
13 45 2 gmark
13 cmark
45 cmark
14 44 3 gmark
14 cmark
44 cmark
19 35 3 gmark
19 cmark
34 cmark
21 33 1 gmark
22 32 1 gmark
22 cmark
32 cmark
23 31 2 gmark
31 cmark
75 113 3 gmark
113 cmark
76 112 2 gmark
76 cmark
79 109 1 gmark
79 cmark
80 108 1 gmark
81 107 1 gmark
82 106 1 gmark
106 cmark
114 129 3 gmark
115 128 2 gmark
115 cmark
116 127 2 gmark
117 126 1 gmark
126 cmark
118 125 3 gmark
118 cmark
125 cmark
119 124 1 gmark
119 cmark
124 cmark

% End Annotations
% show it
showpage
end
%%EOF
